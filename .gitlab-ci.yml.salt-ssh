stages:
  - build
  - push
  - run_1
  - run_2
  - run_3
  - run_4
  - run_5

variables:
  GIT_STRATEGY: none
  GIT_SUBMODULE_STRATEGY: none

build:
  tags:
    - __DEV_RUNNER__
  stage: build
  variables:
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - echo IMAGE - $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
    - docker build --pull -t $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG --build-arg SALT_VERSION=__SALT_VERSION__ .
    - docker run --rm $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG -- /.check_pillar_for_roster.sh
  except:
    refs:
      - /^run_.*/

push:
  tags:
    - __DEV_RUNNER__
  stage: push
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - echo IMAGE - $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
  only:
    refs:
      - master

salt_cmd:
  tags:
    - __PROD_RUNNER__
  stage: run_1
  image: $CI_REGISTRY/$CI_PROJECT_PATH:master
  only:
    refs:
      - /^run_.*/
    variables:
      - $SALT_CMD
  script:
    - /srv/scripts/salt-ssh/salt_cmd.sh "${SALT_MINION}" "${SALT_CMD}"
  after_script:
    - /srv/scripts/salt-ssh/send_notify_devilry.sh

rsnapshot_backup_update_config:
  tags:
    - __PROD_RUNNER__
  stage: run_1
  image: $CI_REGISTRY/$CI_PROJECT_PATH:master
  only:
    refs:
      - /^run_.*/
    variables:
      - $RSNAPSHOT_BACKUP_TYPE
  script:
    - /srv/scripts/salt-ssh/rsnapshot_backup_update_config.sh "${SALT_MINION}"
  after_script:
    - /srv/scripts/salt-ssh/send_notify_devilry.sh

rsnapshot_backup_sync:
  tags:
    - __PROD_RUNNER__
  stage: run_2
  image: $CI_REGISTRY/$CI_PROJECT_PATH:master
  only:
    refs:
      - /^run_.*/
    variables:
      - $RSNAPSHOT_BACKUP_TYPE
  artifacts:
    paths:
      - rsnapshot_backup_sync_status
    when: always
  allow_failure: True # Even if sync fails, go to rotation, status for alerting is sent as artifact
  script:
    - |
      if /srv/scripts/salt-ssh/rsnapshot_backup_sync.sh "${SALT_MINION}" "${RSNAPSHOT_BACKUP_TYPE}" "${SSH_HOST}" "${SSH_PORT}" "${SSH_JUMP}"; then
        echo "export RSNAPSHOT_BACKUP_SYNC=success" > rsnapshot_backup_sync_status
      else
        echo "export RSNAPSHOT_BACKUP_SYNC=failed" > rsnapshot_backup_sync_status
        false
      fi
  after_script:
    - /srv/scripts/salt-ssh/send_notify_devilry.sh

rsnapshot_backup_rotate:
  tags:
    - __PROD_RUNNER__
  stage: run_3
  image: $CI_REGISTRY/$CI_PROJECT_PATH:master
  only:
    refs:
      - /^run_.*/
    variables:
      - $RSNAPSHOT_BACKUP_TYPE
  script:
    - /srv/scripts/salt-ssh/rsnapshot_backup_rotate.sh "${SALT_MINION}" "${RSNAPSHOT_BACKUP_TYPE}" "${SSH_HOST}" "${SSH_PORT}" "${SSH_JUMP}"
  after_script:
    - . rsnapshot_backup_sync_status
    - /srv/scripts/salt-ssh/send_notify_devilry.sh
    - rm -f rsnapshot_backup_sync_status

rsnapshot_backup_check_backup:
  tags:
    - __PROD_RUNNER__
  stage: run_4
  image: $CI_REGISTRY/$CI_PROJECT_PATH:master
  only:
    refs:
      - /^run_.*/
    variables:
      - $RSNAPSHOT_BACKUP_TYPE
  script:
    - /srv/scripts/salt-ssh/rsnapshot_backup_check_backup.sh "${SALT_MINION}" "${RSNAPSHOT_BACKUP_TYPE}" "${SSH_HOST}" "${SSH_PORT}" "${SSH_JUMP}"
  after_script:
    - . rsnapshot_backup_sync_status
    - /srv/scripts/salt-ssh/send_notify_devilry.sh
    - rm -f rsnapshot_backup_sync_status

rsnapshot_backup_check_coverage:
  tags:
    - __PROD_RUNNER__
  stage: run_5
  image: $CI_REGISTRY/$CI_PROJECT_PATH:master
  only:
    refs:
      - /^run_.*/
    variables:
      - $RSNAPSHOT_BACKUP_TYPE
  script:
    - /srv/scripts/salt-ssh/rsnapshot_backup_check_coverage.sh "${SALT_MINION}"
  after_script:
    - . rsnapshot_backup_sync_status
    - /srv/scripts/salt-ssh/send_notify_devilry.sh
    - rm -f rsnapshot_backup_sync_status
